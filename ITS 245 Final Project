package Golf;

import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

import iTS275.players;

import java.awt.*;   

public abstract class Head2HeadGolf {
	
	public static void main(String[] args) {
	
	
    java.util.ArrayList<String> futureTeams =
    new java.util.ArrayList<String>();
    Scanner scan = new Scanner (System.in);
    Scanner keyboard = new Scanner(System.in); // Create a Scanner object for keyboard input as in the exercises we did 
    
   
    final int teams = 3; // Constant for team size 
	
	// Introduction message 
	 System.out.println("Welcome to Head 2 Head golf. Below you can view all players following team name selection");
	 System.out.print(System.lineSeparator());
	 
	// Array list for teams
    ArrayList<String> team1 = new ArrayList<String>();
    ArrayList<String> team2 = new ArrayList<String>();
    ArrayList<String> team3 = new ArrayList<String>();
    
    //System.out.print(James.introduce());
    
 // Display the size of the ArrayList for Team 2.
    // Team 1 Players.
    System.out.println("Team 1: ");

    for (int index = 0; index < team1.size(); index++)
       System.out.println(team1.get(index));	
    
    // Create Player Objects 
    //Team 1
    team1.add("Player 1");
    players James = new players(); 
	  James.name = "James Smith";
	  James.playerID = 5462;
	  James.age = 20;
	  James.score();
	  James.introduce();

	  
    team1.add("Player 2");
    players Catherine = new players(); 
	  Catherine.name = "Catherine Wells";
	  Catherine.playerID = 3567;
	  Catherine.age = 22;
	  Catherine.score();
	  Catherine.introduce();
	    
	  
	  // Display the size of the ArrayList for Team 2.
	   System.out.println("Team 2:");
	    
	    for (int index = 0; index < team2.size(); index++)
	        System.out.println(team2.get(index));
	        
    // Team 2 
    team2.add("Player 3");
    players Kevin = new players(); 
	  Kevin.name = "Kevin Jones";
	  Kevin.playerID = 9336;
	  Kevin.age = 26;
	  Kevin.score();
	  Kevin.introduce();
	   
    
    team2.add("Player 4");
    players Ed = new players(); 
	  Ed.name = "Edward Berry";
	  Ed.playerID = 4778;
	  Ed.age = 20;
	  Ed.score();
	  Ed.introduce();
	 

	// Display the size of the ArrayList for Team 3
	    System.out.println("Team 3:");

	    for (int index = 0; index < team3.size(); index++)
	        System.out.println(team3.get(index)); 
	  
 // Team 3 .
        team3.add("Player 5");
        players Sarah = new players(); 
		  Sarah.name = "Sarah Oakley";
		  Sarah.playerID = 2291;
		  Sarah.age = 25;
		  Sarah.score();
		  Sarah.introduce();
		  
      
        team3.add("Player 6");
        players Joesph = new players(); 
		  Joesph.name = "Joesph Conner";
		  Joesph.playerID = 8914;
		  Joesph.age = 28;
		  Joesph.score();
		  Joesph.introduce();
		  System.out.print(System.lineSeparator()); 
    
    
        { 
        	
	//Switch Statements for available team names
    switch (teams) {
        case 1:  System.out.println("Badgers");
        case 2:  futureTeams.add("Gophers");
        case 3:  futureTeams.add("Whales");
        case 4:  futureTeams.add("Penguins");
        case 5:  futureTeams.add("Wolves");
        case 6: futureTeams.add("Ducks");
        case 7: futureTeams.add("Rhinos");
        case 8: futureTeams.add("Sharks");
                 break;
        default: break;
    }
    System.out.println("Availabe Team Names:");
    if (futureTeams.isEmpty()) {
        System.out.println("Invalid Team");
    } else {
        for (String teamName : futureTeams) {
            System.out.println(teamName);
        }
        
      //Shows available team names that you can select 	
        System.out.println("Choose name for Team 1:");
        String team1Name = scan.nextLine();
        //Player 1 Input Validation
        if ((team1Name != ("Whales"))
                || (team1Name != ("Penguins"))
                || (team1Name != ("Wolves"))
                || (team1Name != ("Ducks"))
                || (team1Name != ("Rhinos"))
                || (team1Name!= ("Sharks")))
        	
        {
            System.out.println("You can only choose from the availabe teams"); // If team name does not match available you will get this message. 
        }
        //Send Back to input
        System.out.println("Choose name for Team 2:");
        String team2Name = scan.nextLine();
        
        if ((team2Name != ("Whales"))
                || (team2Name != ("Penguins"))
                || (team2Name != ("Wolves"))
                || (team2Name != ("Ducks"))
                || (team2Name != ("Rhinos"))
                || (team2Name!= ("Sharks")))
                {
                    System.out.println("You can only choose from the availabe teams");
        }
        
        System.out.println("Choose name for Team 3:");
        String team3Name = scan.nextLine(); //Declare Team 3 Name variable 
        //Player 2 Input Validation
        if ((team3Name != ("Whales"))
                || (team3Name != ("Penguins"))
                || (team3Name != ("Wolves"))
                || (team3Name != ("Ducks"))
                || (team3Name != ("Rhinos"))
                || (team3Name != ("Sharks")))
                {
                    System.out.println("You can only choose from the availabe teams");
                }
    		}
        }
     
    //Exception handling
	try {
	      int[] t1 = {0};
	      System.out.println(t1[0]);
	    } catch (Exception e) {
	      System.out.println("Something went wrong.");
	      
	      try {
		      int[]t2 = {1};
		      System.out.println(t2[1]);
		    } catch (Exception y) {
		      System.out.println("Something went wrong.");
		    }
	      
	      try {
		      int[] t3 = { 2};
		      System.out.println(t3[2]);
		    } catch (Exception x) {
		      System.out.println("Something went wrong.");
		    }
	      
	      
	      
	    }
	 }
	
	

	@Override
	public int hashCode() {
		// TODO Auto-generated method stub
		return super.hashCode();
	}



	@Override
	public boolean equals(Object obj) {
		// TODO Auto-generated method stub
		return super.equals(obj);
	}



	@Override
	protected Object clone() throws CloneNotSupportedException {
		// TODO Auto-generated method stub
		return super.clone();
	}



	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return super.toString();
	}



	@Override
	protected void finalize() throws Throwable {
		// TODO Auto-generated method stub
		super.finalize();
	}



	protected static String introduce() {
		return null;
		// TODO Auto-generated method stub
		
	}
}
    
